name: Build

on: [push, pull_request]

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
        - os: ubuntu-latest
          cmake-args: -G "Unix Makefiles"
          build-args: --parallel
          package-file: twnodes-*-linux_x86_64.tar.xz
          env:
            CFLAGS: -Wdeclaration-after-statement -Werror
            CXXFLAGS: -Werror
        - os: windows-latest
          cmake-args: -G "Visual Studio 16 2019" -A x64
          package-file: twnodes-*-win64.zip
          env:
            CFLAGS: /WX
            CXXFLAGS: /WX
            LDFLAGS: /WX
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        sudo apt-get install pkg-config cmake libfreetype6-dev libsdl2-dev libcurl4-openssl-dev libssl-dev -y
        
    - name: Build
      env: ${{ matrix.env }}
      run: |
        mkdir release
        cd release
        ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Release -Werror=dev -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Release ${{ matrix.build-args }} --target everything
        
    - name: Test release
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release ${{ matrix.build-args }} --target run_tests
        ./twnodes_srv shutdown
        
    - name: Package
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release ${{ matrix.build-args }} --target package_default
        mkdir artifacts
        mv ${{ matrix.package-file }} artifacts
    - name: Upload Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: twnodes-${{ matrix.os }}
        path: release/artifacts
    
        
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: build-cmake
        
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Extract version tag
        if: startsWith(github.ref, 'refs/heads/release/')
        shell: bash
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/release/}"
        id: extract_version_tag
        
      - name: Create Release
        if: startsWith(github.ref, 'refs/heads/release/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version_tag.outputs.branch }}
          release_name: Release ${{ steps.extract_version_tag.outputs.branch }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/heads/release/')
        id: upload_release_asset 
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release/artifacts/*
          tag: ${{ steps.extract_version_tag.outputs.branch }}
          overwrite: true
          file_glob: true
